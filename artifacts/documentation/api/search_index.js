var search_data = {
    'index': {
        'searchIndex': ["icecave","icecave\\coro","icecave\\coro\\channel","icecave\\coro\\channel\\exception","icecave\\coro\\coroutine","icecave\\coro\\engine","icecave\\coro\\react","icecave\\coro\\task","icecave\\coro\\task\\compound","icecave\\coro\\task\\exception","icecave\\coro\\task\\primitives","icecave\\coro\\channel\\channel","icecave\\coro\\channel\\channelinterface","icecave\\coro\\channel\\exception\\channelclosedexception","icecave\\coro\\channel\\exception\\channelexceptioninterface","icecave\\coro\\channel\\readablechannelinterface","icecave\\coro\\channel\\writablechannelinterface","icecave\\coro\\coro","icecave\\coro\\coroutine\\coroutine","icecave\\coro\\coroutine\\coroutineinterface","icecave\\coro\\coroutine\\driverinterface","icecave\\coro\\coroutine\\generatordriver","icecave\\coro\\engine\\abstractengine","icecave\\coro\\engine\\engineinterface","icecave\\coro\\engine\\facade","icecave\\coro\\engine\\facadeinterface","icecave\\coro\\engine\\facadeoperation","icecave\\coro\\engine\\synchronousengine","icecave\\coro\\engine\\taskroot","icecave\\coro\\packageinfo","icecave\\coro\\react\\eventloopengine","icecave\\coro\\react\\promiseprimitive","icecave\\coro\\react\\reactfacade","icecave\\coro\\react\\reacttaskadaptor","icecave\\coro\\task\\abstractparenttask","icecave\\coro\\task\\abstracttask","icecave\\coro\\task\\compound\\waitall","icecave\\coro\\task\\compound\\waitallresult","icecave\\coro\\task\\compound\\waitany","icecave\\coro\\task\\compound\\waitanyresult","icecave\\coro\\task\\exception\\taskadaptationexception","icecave\\coro\\task\\exception\\taskcancelledexception","icecave\\coro\\task\\exception\\taskexceptioninterface","icecave\\coro\\task\\exception\\tasktimeoutexception","icecave\\coro\\task\\primitives\\immediateprimitive","icecave\\coro\\task\\primitives\\returnprimitive","icecave\\coro\\task\\primitives\\sleepprimitive","icecave\\coro\\task\\primitives\\suspendprimitive","icecave\\coro\\task\\primitives\\throwprimitive","icecave\\coro\\task\\primitives\\timeoutprimitive","icecave\\coro\\task\\taskadaptor","icecave\\coro\\task\\taskadaptorinterface","icecave\\coro\\task\\taskinterface","icecave\\coro\\task\\taskparentinterface","icecave\\coro\\task\\taskproviderinterface","icecave\\coro\\task\\taskstatus","icecave\\coro\\channel\\channel::__construct","icecave\\coro\\channel\\channel::read","icecave\\coro\\channel\\channel::tryread","icecave\\coro\\channel\\channel::write","icecave\\coro\\channel\\channel::trywrite","icecave\\coro\\channel\\channel::close","icecave\\coro\\channel\\channel::readytoread","icecave\\coro\\channel\\channel::readyforwrite","icecave\\coro\\channel\\channel::isclosed","icecave\\coro\\channel\\channelinterface::close","icecave\\coro\\channel\\channelinterface::isclosed","icecave\\coro\\channel\\exception\\channelclosedexception::__construct","icecave\\coro\\channel\\exception\\channelclosedexception::channel","icecave\\coro\\channel\\exception\\channelexceptioninterface::channel","icecave\\coro\\channel\\readablechannelinterface::read","icecave\\coro\\channel\\readablechannelinterface::tryread","icecave\\coro\\channel\\writablechannelinterface::write","icecave\\coro\\channel\\writablechannelinterface::trywrite","icecave\\coro\\coro::__callstatic","icecave\\coro\\coroutine\\coroutine::__construct","icecave\\coro\\coroutine\\coroutine::resume","icecave\\coro\\coroutine\\coroutine::resumewithexception","icecave\\coro\\coroutine\\coroutine::ontaskcomplete","icecave\\coro\\coroutine\\coroutine::ontaskcompletewithexception","icecave\\coro\\coroutine\\coroutineinterface::resume","icecave\\coro\\coroutine\\coroutineinterface::resumewithexception","icecave\\coro\\coroutine\\driverinterface::step","icecave\\coro\\coroutine\\driverinterface::setvalue","icecave\\coro\\coroutine\\driverinterface::setexception","icecave\\coro\\coroutine\\driverinterface::close","icecave\\coro\\coroutine\\generatordriver::__construct","icecave\\coro\\coroutine\\generatordriver::generator","icecave\\coro\\coroutine\\generatordriver::step","icecave\\coro\\coroutine\\generatordriver::setvalue","icecave\\coro\\coroutine\\generatordriver::setexception","icecave\\coro\\coroutine\\generatordriver::close","icecave\\coro\\engine\\abstractengine::__construct","icecave\\coro\\engine\\abstractengine::enqueuetask","icecave\\coro\\engine\\abstractengine::facadeimplementation","icecave\\coro\\engine\\abstractengine::taskadaptor","icecave\\coro\\engine\\abstractengine::taskroot","icecave\\coro\\engine\\engineinterface::enqueuetask","icecave\\coro\\engine\\engineinterface::enqueue","icecave\\coro\\engine\\engineinterface::executeafter","icecave\\coro\\engine\\engineinterface::facadeimplementation","icecave\\coro\\engine\\engineinterface::taskadaptor","icecave\\coro\\engine\\engineinterface::taskroot","icecave\\coro\\engine\\facade::return_","icecave\\coro\\engine\\facade::throw_","icecave\\coro\\engine\\facade::get","icecave\\coro\\engine\\facade::enqueuetask","icecave\\coro\\engine\\facade::enqueue","icecave\\coro\\engine\\facade::engine","icecave\\coro\\engine\\facade::all","icecave\\coro\\engine\\facade::any","icecave\\coro\\engine\\facade::sleep","icecave\\coro\\engine\\facade::suspend","icecave\\coro\\engine\\facade::timeout","icecave\\coro\\engine\\facadeinterface::return_","icecave\\coro\\engine\\facadeinterface::throw_","icecave\\coro\\engine\\facadeinterface::get","icecave\\coro\\engine\\facadeinterface::enqueuetask","icecave\\coro\\engine\\facadeinterface::enqueue","icecave\\coro\\engine\\facadeinterface::engine","icecave\\coro\\engine\\facadeinterface::all","icecave\\coro\\engine\\facadeinterface::any","icecave\\coro\\engine\\facadeinterface::sleep","icecave\\coro\\engine\\facadeinterface::suspend","icecave\\coro\\engine\\facadeinterface::timeout","icecave\\coro\\engine\\facadeoperation::__construct","icecave\\coro\\engine\\facadeoperation::name","icecave\\coro\\engine\\facadeoperation::arguments","icecave\\coro\\engine\\facadeoperation::task","icecave\\coro\\engine\\synchronousengine::__construct","icecave\\coro\\engine\\synchronousengine::enqueue","icecave\\coro\\engine\\synchronousengine::executeafter","icecave\\coro\\engine\\synchronousengine::run","icecave\\coro\\engine\\taskroot::engine","icecave\\coro\\engine\\taskroot::setengine","icecave\\coro\\engine\\taskroot::ontaskattached","icecave\\coro\\engine\\taskroot::ontaskdetached","icecave\\coro\\engine\\taskroot::ontaskcomplete","icecave\\coro\\engine\\taskroot::ontaskcompletewithexception","icecave\\coro\\engine\\taskroot::ontaskcancelled","icecave\\coro\\react\\eventloopengine::__construct","icecave\\coro\\react\\eventloopengine::enqueue","icecave\\coro\\react\\eventloopengine::executeafter","icecave\\coro\\react\\eventloopengine::eventloop","icecave\\coro\\react\\promiseprimitive::__construct","icecave\\coro\\react\\promiseprimitive::onpromisefulfilled","icecave\\coro\\react\\promiseprimitive::onpromiserejected","icecave\\coro\\react\\reactfacade::eventloop","icecave\\coro\\react\\reacttaskadaptor::tryadapt","icecave\\coro\\task\\abstractparenttask::__construct","icecave\\coro\\task\\abstractparenttask::ontaskattached","icecave\\coro\\task\\abstractparenttask::ontaskdetached","icecave\\coro\\task\\abstractparenttask::ontaskcancelled","icecave\\coro\\task\\abstractparenttask::children","icecave\\coro\\task\\abstracttask::__construct","icecave\\coro\\task\\abstracttask::attach","icecave\\coro\\task\\abstracttask::detach","icecave\\coro\\task\\abstracttask::orphan","icecave\\coro\\task\\abstracttask::isattached","icecave\\coro\\task\\abstracttask::parent","icecave\\coro\\task\\abstracttask::engine","icecave\\coro\\task\\abstracttask::status","icecave\\coro\\task\\abstracttask::execute","icecave\\coro\\task\\abstracttask::cancel","icecave\\coro\\task\\compound\\waitall::__construct","icecave\\coro\\task\\compound\\waitall::ontaskcomplete","icecave\\coro\\task\\compound\\waitall::ontaskcompletewithexception","icecave\\coro\\task\\compound\\waitallresult::__construct","icecave\\coro\\task\\compound\\waitallresult::get","icecave\\coro\\task\\compound\\waitallresult::hasexceptions","icecave\\coro\\task\\compound\\waitallresult::isvalue","icecave\\coro\\task\\compound\\waitallresult::isexception","icecave\\coro\\task\\compound\\waitallresult::setvalue","icecave\\coro\\task\\compound\\waitallresult::setexception","icecave\\coro\\task\\compound\\waitallresult::count","icecave\\coro\\task\\compound\\waitallresult::getiterator","icecave\\coro\\task\\compound\\waitallresult::offsetexists","icecave\\coro\\task\\compound\\waitallresult::offsetget","icecave\\coro\\task\\compound\\waitallresult::offsetset","icecave\\coro\\task\\compound\\waitallresult::offsetunset","icecave\\coro\\task\\compound\\waitany::__construct","icecave\\coro\\task\\compound\\waitany::ontaskcomplete","icecave\\coro\\task\\compound\\waitany::ontaskcompletewithexception","icecave\\coro\\task\\compound\\waitanyresult::__construct","icecave\\coro\\task\\compound\\waitanyresult::index","icecave\\coro\\task\\compound\\waitanyresult::get","icecave\\coro\\task\\compound\\waitanyresult::isvalue","icecave\\coro\\task\\compound\\waitanyresult::isexception","icecave\\coro\\task\\compound\\waitanyresult::setvalue","icecave\\coro\\task\\compound\\waitanyresult::setexception","icecave\\coro\\task\\exception\\taskadaptationexception::__construct","icecave\\coro\\task\\exception\\taskcancelledexception::__construct","icecave\\coro\\task\\exception\\tasktimeoutexception::__construct","icecave\\coro\\task\\primitives\\immediateprimitive::__construct","icecave\\coro\\task\\primitives\\immediateprimitive::callback","icecave\\coro\\task\\primitives\\returnprimitive::__construct","icecave\\coro\\task\\primitives\\sleepprimitive::__construct","icecave\\coro\\task\\primitives\\suspendprimitive::__construct","icecave\\coro\\task\\primitives\\throwprimitive::__construct","icecave\\coro\\task\\primitives\\timeoutprimitive::__construct","icecave\\coro\\task\\primitives\\timeoutprimitive::ontaskcomplete","icecave\\coro\\task\\primitives\\timeoutprimitive::ontaskcompletewithexception","icecave\\coro\\task\\primitives\\timeoutprimitive::ontimeout","icecave\\coro\\task\\taskadaptor::adapt","icecave\\coro\\task\\taskadaptor::tryadapt","icecave\\coro\\task\\taskadaptorinterface::adapt","icecave\\coro\\task\\taskadaptorinterface::tryadapt","icecave\\coro\\task\\taskinterface::attach","icecave\\coro\\task\\taskinterface::detach","icecave\\coro\\task\\taskinterface::orphan","icecave\\coro\\task\\taskinterface::isattached","icecave\\coro\\task\\taskinterface::parent","icecave\\coro\\task\\taskinterface::engine","icecave\\coro\\task\\taskinterface::status","icecave\\coro\\task\\taskinterface::execute","icecave\\coro\\task\\taskinterface::cancel","icecave\\coro\\task\\taskparentinterface::engine","icecave\\coro\\task\\taskparentinterface::ontaskattached","icecave\\coro\\task\\taskparentinterface::ontaskdetached","icecave\\coro\\task\\taskparentinterface::ontaskcomplete","icecave\\coro\\task\\taskparentinterface::ontaskcompletewithexception","icecave\\coro\\task\\taskparentinterface::ontaskcancelled","icecave\\coro\\task\\taskproviderinterface::task"],
        'info': [["Icecave","","Icecave.html","","",3],["Icecave\\Coro","","Icecave\/Coro.html","","",3],["Icecave\\Coro\\Channel","","Icecave\/Coro\/Channel.html","","",3],["Icecave\\Coro\\Channel\\Exception","","Icecave\/Coro\/Channel\/Exception.html","","",3],["Icecave\\Coro\\Coroutine","","Icecave\/Coro\/Coroutine.html","","",3],["Icecave\\Coro\\Engine","","Icecave\/Coro\/Engine.html","","",3],["Icecave\\Coro\\React","","Icecave\/Coro\/React.html","","",3],["Icecave\\Coro\\Task","","Icecave\/Coro\/Task.html","","",3],["Icecave\\Coro\\Task\\Compound","","Icecave\/Coro\/Task\/Compound.html","","",3],["Icecave\\Coro\\Task\\Exception","","Icecave\/Coro\/Task\/Exception.html","","",3],["Icecave\\Coro\\Task\\Primitives","","Icecave\/Coro\/Task\/Primitives.html","","",3],["Channel","Icecave\\Coro\\Channel","Icecave\/Coro\/Channel\/Channel.html","","An unbuffered data channel.",1],["ChannelInterface","Icecave\\Coro\\Channel","Icecave\/Coro\/Channel\/ChannelInterface.html","","A data channel is a (possibly asynchronous) queue of",1],["ChannelClosedException","Icecave\\Coro\\Channel\\Exception","Icecave\/Coro\/Channel\/Exception\/ChannelClosedException.html"," < Exception","A read or write operation was attempted on a channel",1],["ChannelExceptionInterface","Icecave\\Coro\\Channel\\Exception","Icecave\/Coro\/Channel\/Exception\/ChannelExceptionInterface.html","","A common interface for grouping all channel related",1],["ReadableChannelInterface","Icecave\\Coro\\Channel","Icecave\/Coro\/Channel\/ReadableChannelInterface.html","","A data channel from which objects may be obtained (aka",1],["WritableChannelInterface","Icecave\\Coro\\Channel","Icecave\/Coro\/Channel\/WritableChannelInterface.html","","A data channel to which objects may be written (aka",1],["Coro","Icecave\\Coro","Icecave\/Coro\/Coro.html","","Public facade for co-routine operations.",1],["Coroutine","Icecave\\Coro\\Coroutine","Icecave\/Coro\/Coroutine\/Coroutine.html"," < AbstractParentTask","Wraps a DriverInterface to provide CoroutineInterface.",1],["CoroutineInterface","Icecave\\Coro\\Coroutine","Icecave\/Coro\/Coroutine\/CoroutineInterface.html","","A task which can suspend and resume multiple times.",1],["DriverInterface","Icecave\\Coro\\Coroutine","Icecave\/Coro\/Coroutine\/DriverInterface.html","","Low-level driver for co-routine implementations.",1],["GeneratorDriver","Icecave\\Coro\\Coroutine","Icecave\/Coro\/Coroutine\/GeneratorDriver.html","","Low-level driver for co-routines based on PHP generators.",1],["AbstractEngine","Icecave\\Coro\\Engine","Icecave\/Coro\/Engine\/AbstractEngine.html","","Common implementation for co-routine engines.",1],["EngineInterface","Icecave\\Coro\\Engine","Icecave\/Coro\/Engine\/EngineInterface.html","","A co-routine engine.",1],["Facade","Icecave\\Coro\\Engine","Icecave\/Coro\/Engine\/Facade.html","","A helper object for use through the static Coro facade.",1],["FacadeInterface","Icecave\\Coro\\Engine","Icecave\/Coro\/Engine\/FacadeInterface.html","","A helper object for use through the static Coro facade.",1],["FacadeOperation","Icecave\\Coro\\Engine","Icecave\/Coro\/Engine\/FacadeOperation.html","","Represents a call made via the Coro facade.",1],["SynchronousEngine","Icecave\\Coro\\Engine","Icecave\/Coro\/Engine\/SynchronousEngine.html"," < AbstractEngine","A simple synchronous co-routine interface.",1],["TaskRoot","Icecave\\Coro\\Engine","Icecave\/Coro\/Engine\/TaskRoot.html","","The parent to which all top-level tasks are attached.",1],["PackageInfo","Icecave\\Coro","Icecave\/Coro\/PackageInfo.html","","",1],["EventLoopEngine","Icecave\\Coro\\React","Icecave\/Coro\/React\/EventLoopEngine.html"," < AbstractEngine","A co-routine engine based on ReactPHP's event loop.",1],["PromisePrimitive","Icecave\\Coro\\React","Icecave\/Coro\/React\/PromisePrimitive.html"," < AbstractTask","Send a value or error to the parent task when a promise",1],["ReactFacade","Icecave\\Coro\\React","Icecave\/Coro\/React\/ReactFacade.html"," < Facade","A helper object for use through the static Coro facade.",1],["ReactTaskAdaptor","Icecave\\Coro\\React","Icecave\/Coro\/React\/ReactTaskAdaptor.html"," < TaskAdaptor","Task adaptor for use with the react event loop.",1],["AbstractParentTask","Icecave\\Coro\\Task","Icecave\/Coro\/Task\/AbstractParentTask.html"," < AbstractTask","Common implementation for tasks that are also task",1],["AbstractTask","Icecave\\Coro\\Task","Icecave\/Coro\/Task\/AbstractTask.html","","Common implementation for tasks.",1],["WaitAll","Icecave\\Coro\\Task\\Compound","Icecave\/Coro\/Task\/Compound\/WaitAll.html"," < AbstractParentTask","Wait for all child tasks to complete before returning",1],["WaitAllResult","Icecave\\Coro\\Task\\Compound","Icecave\/Coro\/Task\/Compound\/WaitAllResult.html","","An array-like object that contains results of a \"wait-all\"",1],["WaitAny","Icecave\\Coro\\Task\\Compound","Icecave\/Coro\/Task\/Compound\/WaitAny.html"," < AbstractParentTask","Wait for any one of the child tasks to complete before",1],["WaitAnyResult","Icecave\\Coro\\Task\\Compound","Icecave\/Coro\/Task\/Compound\/WaitAnyResult.html","","",1],["TaskAdaptationException","Icecave\\Coro\\Task\\Exception","Icecave\/Coro\/Task\/Exception\/TaskAdaptationException.html"," < LogicException","Indicates that a given value could not be adapted into",1],["TaskCancelledException","Icecave\\Coro\\Task\\Exception","Icecave\/Coro\/Task\/Exception\/TaskCancelledException.html"," < RuntimeException","Indicates that a task was cancelled.",1],["TaskExceptionInterface","Icecave\\Coro\\Task\\Exception","Icecave\/Coro\/Task\/Exception\/TaskExceptionInterface.html","","A common interface for grouping all task related exceptions.",1],["TaskTimeoutException","Icecave\\Coro\\Task\\Exception","Icecave\/Coro\/Task\/Exception\/TaskTimeoutException.html"," < RuntimeException","Indicates that a task has timed out.",1],["ImmediatePrimitive","Icecave\\Coro\\Task\\Primitives","Icecave\/Coro\/Task\/Primitives\/ImmediatePrimitive.html"," < AbstractTask","Invoke a callback immediately and send the result to",1],["ReturnPrimitive","Icecave\\Coro\\Task\\Primitives","Icecave\/Coro\/Task\/Primitives\/ReturnPrimitive.html"," < AbstractTask","Detaches the parent task from its parent, and resumes",1],["SleepPrimitive","Icecave\\Coro\\Task\\Primitives","Icecave\/Coro\/Task\/Primitives\/SleepPrimitive.html"," < AbstractTask","Suspend the parent task and enqueue it to be resumed",1],["SuspendPrimitive","Icecave\\Coro\\Task\\Primitives","Icecave\/Coro\/Task\/Primitives\/SuspendPrimitive.html"," < AbstractTask","Suspend the parent task.",1],["ThrowPrimitive","Icecave\\Coro\\Task\\Primitives","Icecave\/Coro\/Task\/Primitives\/ThrowPrimitive.html"," < AbstractTask","Detaches the parent task from its parent, and resumes",1],["TimeoutPrimitive","Icecave\\Coro\\Task\\Primitives","Icecave\/Coro\/Task\/Primitives\/TimeoutPrimitive.html"," < AbstractParentTask","Execute a child task and cancel it if execution is",1],["TaskAdaptor","Icecave\\Coro\\Task","Icecave\/Coro\/Task\/TaskAdaptor.html","","The default task adaptor implementation.",1],["TaskAdaptorInterface","Icecave\\Coro\\Task","Icecave\/Coro\/Task\/TaskAdaptorInterface.html","","Adapts values into TaskInterface objects.",1],["TaskInterface","Icecave\\Coro\\Task","Icecave\/Coro\/Task\/TaskInterface.html","","Logic that can be executed on by a co-routine engine.",1],["TaskParentInterface","Icecave\\Coro\\Task","Icecave\/Coro\/Task\/TaskParentInterface.html","","An object to which tasks can be attached.",1],["TaskProviderInterface","Icecave\\Coro\\Task","Icecave\/Coro\/Task\/TaskProviderInterface.html","","An object that can produce tasks.",1],["TaskStatus","Icecave\\Coro\\Task","Icecave\/Coro\/Task\/TaskStatus.html"," < Enumeration","Represents the current state of a task.",1],["Channel::__construct","Icecave\\Coro\\Channel\\Channel","Icecave\/Coro\/Channel\/Channel.html#method___construct","()","",2],["Channel::read","Icecave\\Coro\\Channel\\Channel","Icecave\/Coro\/Channel\/Channel.html#method_read","()","Read from this channel.",2],["Channel::tryRead","Icecave\\Coro\\Channel\\Channel","Icecave\/Coro\/Channel\/Channel.html#method_tryRead","($value)","Attempt a non-blocking read from this channel.",2],["Channel::write","Icecave\\Coro\\Channel\\Channel","Icecave\/Coro\/Channel\/Channel.html#method_write","($value)","Write to this channel.",2],["Channel::tryWrite","Icecave\\Coro\\Channel\\Channel","Icecave\/Coro\/Channel\/Channel.html#method_tryWrite","($value)","Attempt a non-blocking write to this channel.",2],["Channel::close","Icecave\\Coro\\Channel\\Channel","Icecave\/Coro\/Channel\/Channel.html#method_close","()","Close this channel.",2],["Channel::readyToRead","Icecave\\Coro\\Channel\\Channel","Icecave\/Coro\/Channel\/Channel.html#method_readyToRead","()","Check if a value can be read from the channel without",2],["Channel::readyForWrite","Icecave\\Coro\\Channel\\Channel","Icecave\/Coro\/Channel\/Channel.html#method_readyForWrite","()","Check if a value can be written to the channel without",2],["Channel::isClosed","Icecave\\Coro\\Channel\\Channel","Icecave\/Coro\/Channel\/Channel.html#method_isClosed","()","Check if this channel is closed.",2],["ChannelInterface::close","Icecave\\Coro\\Channel\\ChannelInterface","Icecave\/Coro\/Channel\/ChannelInterface.html#method_close","()","Close this channel.",2],["ChannelInterface::isClosed","Icecave\\Coro\\Channel\\ChannelInterface","Icecave\/Coro\/Channel\/ChannelInterface.html#method_isClosed","()","Check if this channel is closed.",2],["ChannelClosedException::__construct","Icecave\\Coro\\Channel\\Exception\\ChannelClosedException","Icecave\/Coro\/Channel\/Exception\/ChannelClosedException.html#method___construct","(<a href=\"Icecave\/Coro\/Channel\/ChannelInterface.html\"><abbr title=\"Icecave\\Coro\\Channel\\ChannelInterface\">ChannelInterface<\/abbr><\/a> $channel, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","",2],["ChannelClosedException::channel","Icecave\\Coro\\Channel\\Exception\\ChannelClosedException","Icecave\/Coro\/Channel\/Exception\/ChannelClosedException.html#method_channel","()","Fetch the channel that has been closed.",2],["ChannelExceptionInterface::channel","Icecave\\Coro\\Channel\\Exception\\ChannelExceptionInterface","Icecave\/Coro\/Channel\/Exception\/ChannelExceptionInterface.html#method_channel","()","",2],["ReadableChannelInterface::read","Icecave\\Coro\\Channel\\ReadableChannelInterface","Icecave\/Coro\/Channel\/ReadableChannelInterface.html#method_read","()","Read from this channel.",2],["ReadableChannelInterface::tryRead","Icecave\\Coro\\Channel\\ReadableChannelInterface","Icecave\/Coro\/Channel\/ReadableChannelInterface.html#method_tryRead","($value)","Attempt a non-blocking read from this channel.",2],["WritableChannelInterface::write","Icecave\\Coro\\Channel\\WritableChannelInterface","Icecave\/Coro\/Channel\/WritableChannelInterface.html#method_write","($value)","Write to this channel.",2],["WritableChannelInterface::tryWrite","Icecave\\Coro\\Channel\\WritableChannelInterface","Icecave\/Coro\/Channel\/WritableChannelInterface.html#method_tryWrite","($value)","Attempt a non-blocking write to this channel.",2],["Coro::__callStatic","Icecave\\Coro\\Coro","Icecave\/Coro\/Coro.html#method___callStatic","($name, array $arguments)","Invoke a method on the current engine's facade implementation.",2],["Coroutine::__construct","Icecave\\Coro\\Coroutine\\Coroutine","Icecave\/Coro\/Coroutine\/Coroutine.html#method___construct","(<a href=\"Icecave\/Coro\/Coroutine\/DriverInterface.html\"><abbr title=\"Icecave\\Coro\\Coroutine\\DriverInterface\">DriverInterface<\/abbr><\/a> $driver)","",2],["Coroutine::resume","Icecave\\Coro\\Coroutine\\Coroutine","Icecave\/Coro\/Coroutine\/Coroutine.html#method_resume","(mixed $value = null)","Resume execution of this co-routine.",2],["Coroutine::resumeWithException","Icecave\\Coro\\Coroutine\\Coroutine","Icecave\/Coro\/Coroutine\/Coroutine.html#method_resumeWithException","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Resume execution of this co-routine with an error.",2],["Coroutine::onTaskComplete","Icecave\\Coro\\Coroutine\\Coroutine","Icecave\/Coro\/Coroutine\/Coroutine.html#method_onTaskComplete","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task, mixed $value = null)","Notify this task that a child task has completed.",2],["Coroutine::onTaskCompleteWithException","Icecave\\Coro\\Coroutine\\Coroutine","Icecave\/Coro\/Coroutine\/Coroutine.html#method_onTaskCompleteWithException","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Notify this task that a child task has completed with",2],["CoroutineInterface::resume","Icecave\\Coro\\Coroutine\\CoroutineInterface","Icecave\/Coro\/Coroutine\/CoroutineInterface.html#method_resume","(mixed $value = null)","Resume execution of this co-routine.",2],["CoroutineInterface::resumeWithException","Icecave\\Coro\\Coroutine\\CoroutineInterface","Icecave\/Coro\/Coroutine\/CoroutineInterface.html#method_resumeWithException","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Resume execution of this co-routine with an error.",2],["DriverInterface::step","Icecave\\Coro\\Coroutine\\DriverInterface","Icecave\/Coro\/Coroutine\/DriverInterface.html#method_step","(mixed $value = null, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception = null)","Fetch the current value from the co-routine.",2],["DriverInterface::setValue","Icecave\\Coro\\Coroutine\\DriverInterface","Icecave\/Coro\/Coroutine\/DriverInterface.html#method_setValue","(mixed $value = null)","Set the value to send to the co-routine next time fetch()",2],["DriverInterface::setException","Icecave\\Coro\\Coroutine\\DriverInterface","Icecave\/Coro\/Coroutine\/DriverInterface.html#method_setException","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Set the exception to send to the co-routine next to",2],["DriverInterface::close","Icecave\\Coro\\Coroutine\\DriverInterface","Icecave\/Coro\/Coroutine\/DriverInterface.html#method_close","()","Terminate the co-routine and clean-up any resources.",2],["GeneratorDriver::__construct","Icecave\\Coro\\Coroutine\\GeneratorDriver","Icecave\/Coro\/Coroutine\/GeneratorDriver.html#method___construct","(<a href=\"http:\/\/php.net\/Generator\"><abbr title=\"Generator\">Generator<\/abbr><\/a> $generator)","",2],["GeneratorDriver::generator","Icecave\\Coro\\Coroutine\\GeneratorDriver","Icecave\/Coro\/Coroutine\/GeneratorDriver.html#method_generator","()","Fetch the PHP generator that implements the co-routine",2],["GeneratorDriver::step","Icecave\\Coro\\Coroutine\\GeneratorDriver","Icecave\/Coro\/Coroutine\/GeneratorDriver.html#method_step","(mixed $value = null, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception = null)","Fetch the current value from the co-routine.",2],["GeneratorDriver::setValue","Icecave\\Coro\\Coroutine\\GeneratorDriver","Icecave\/Coro\/Coroutine\/GeneratorDriver.html#method_setValue","(mixed $value = null)","Set the value to send to the co-routine next time fetch()",2],["GeneratorDriver::setException","Icecave\\Coro\\Coroutine\\GeneratorDriver","Icecave\/Coro\/Coroutine\/GeneratorDriver.html#method_setException","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Set the exception to send to the co-routine next to",2],["GeneratorDriver::close","Icecave\\Coro\\Coroutine\\GeneratorDriver","Icecave\/Coro\/Coroutine\/GeneratorDriver.html#method_close","()","Terminate the co-routine and clean-up any resources.",2],["AbstractEngine::__construct","Icecave\\Coro\\Engine\\AbstractEngine","Icecave\/Coro\/Engine\/AbstractEngine.html#method___construct","(<a href=\"Icecave\/Coro\/Engine\/FacadeInterface.html\"><abbr title=\"Icecave\\Coro\\Engine\\FacadeInterface\">FacadeInterface<\/abbr><\/a> $facadeImplementation, <a href=\"Icecave\/Coro\/Task\/TaskAdaptorInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskAdaptorInterface\">TaskAdaptorInterface<\/abbr><\/a> $taskAdaptor, <a href=\"Icecave\/Coro\/Engine\/TaskRoot.html\"><abbr title=\"Icecave\\Coro\\Engine\\TaskRoot\">TaskRoot<\/abbr><\/a> $taskRoot = null)","",2],["AbstractEngine::enqueueTask","Icecave\\Coro\\Engine\\AbstractEngine","Icecave\/Coro\/Engine\/AbstractEngine.html#method_enqueueTask","(mixed $task)","Enqueue a task for execution.",2],["AbstractEngine::facadeImplementation","Icecave\\Coro\\Engine\\AbstractEngine","Icecave\/Coro\/Engine\/AbstractEngine.html#method_facadeImplementation","()","Fetch the object that implements the behaviour of the",2],["AbstractEngine::taskAdaptor","Icecave\\Coro\\Engine\\AbstractEngine","Icecave\/Coro\/Engine\/AbstractEngine.html#method_taskAdaptor","()","Fetch the adaptor used to convert values into tasks.",2],["AbstractEngine::taskRoot","Icecave\\Coro\\Engine\\AbstractEngine","Icecave\/Coro\/Engine\/AbstractEngine.html#method_taskRoot","()","Fetch the parent to which all top-level tasks are attached.",2],["EngineInterface::enqueueTask","Icecave\\Coro\\Engine\\EngineInterface","Icecave\/Coro\/Engine\/EngineInterface.html#method_enqueueTask","(mixed $task)","Enqueue a task for execution.",2],["EngineInterface::enqueue","Icecave\\Coro\\Engine\\EngineInterface","Icecave\/Coro\/Engine\/EngineInterface.html#method_enqueue","(<abbr title=\"Icecave\\Coro\\Engine\\callable\">callable<\/abbr> $callback, array $arguments = array())","Enqueue a callback for execution.",2],["EngineInterface::executeAfter","Icecave\\Coro\\Engine\\EngineInterface","Icecave\/Coro\/Engine\/EngineInterface.html#method_executeAfter","(<abbr title=\"Icecave\\Coro\\Engine\\number\">number<\/abbr> $delay, <abbr title=\"Icecave\\Coro\\Engine\\callable\">callable<\/abbr> $callback, array $arguments = array())","Enqueue a callback for execution after a given timeout.",2],["EngineInterface::facadeImplementation","Icecave\\Coro\\Engine\\EngineInterface","Icecave\/Coro\/Engine\/EngineInterface.html#method_facadeImplementation","()","Fetch the object that implements the behaviour of the",2],["EngineInterface::taskAdaptor","Icecave\\Coro\\Engine\\EngineInterface","Icecave\/Coro\/Engine\/EngineInterface.html#method_taskAdaptor","()","Fetch the adaptor used to convert values into tasks.",2],["EngineInterface::taskRoot","Icecave\\Coro\\Engine\\EngineInterface","Icecave\/Coro\/Engine\/EngineInterface.html#method_taskRoot","()","Fetch the parent to which all top-level tasks are attached.",2],["Facade::return_","Icecave\\Coro\\Engine\\Facade","Icecave\/Coro\/Engine\/Facade.html#method_return_","($value = null)","Return a value to the calling co-routine and continue",2],["Facade::throw_","Icecave\\Coro\\Engine\\Facade","Icecave\/Coro\/Engine\/Facade.html#method_throw_","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Throw an exception to the calling co-routine and continue",2],["Facade::get","Icecave\\Coro\\Engine\\Facade","Icecave\/Coro\/Engine\/Facade.html#method_get","()","Get the currently executing co-routine.",2],["Facade::enqueueTask","Icecave\\Coro\\Engine\\Facade","Icecave\/Coro\/Engine\/Facade.html#method_enqueueTask","($task)","Enqueue a task for execution.",2],["Facade::enqueue","Icecave\\Coro\\Engine\\Facade","Icecave\/Coro\/Engine\/Facade.html#method_enqueue","(<abbr title=\"Icecave\\Coro\\Engine\\callable\">callable<\/abbr> $callback, array $arguments = array())","Enqueue a callback for execution.",2],["Facade::engine","Icecave\\Coro\\Engine\\Facade","Icecave\/Coro\/Engine\/Facade.html#method_engine","()","Fetch the engine on which the current co-routine is",2],["Facade::all","Icecave\\Coro\\Engine\\Facade","Icecave\/Coro\/Engine\/Facade.html#method_all","($task1, $task2)","Wait for all of the given tasks to complete.",2],["Facade::any","Icecave\\Coro\\Engine\\Facade","Icecave\/Coro\/Engine\/Facade.html#method_any","($task1, $task2)","Wait for any of the given tasks to complete.",2],["Facade::sleep","Icecave\\Coro\\Engine\\Facade","Icecave\/Coro\/Engine\/Facade.html#method_sleep","($timeout)","Suspend execution for a specified period of time.",2],["Facade::suspend","Icecave\\Coro\\Engine\\Facade","Icecave\/Coro\/Engine\/Facade.html#method_suspend","(<abbr title=\"Icecave\\Coro\\Engine\\callable\">callable<\/abbr> $callback)","Suspend the current co-routine.",2],["Facade::timeout","Icecave\\Coro\\Engine\\Facade","Icecave\/Coro\/Engine\/Facade.html#method_timeout","($timeout, $coroutine)","Execute a co-routine with a time limit.",2],["FacadeInterface::return_","Icecave\\Coro\\Engine\\FacadeInterface","Icecave\/Coro\/Engine\/FacadeInterface.html#method_return_","($value = null)","Return a value to the calling co-routine and continue",2],["FacadeInterface::throw_","Icecave\\Coro\\Engine\\FacadeInterface","Icecave\/Coro\/Engine\/FacadeInterface.html#method_throw_","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Throw an exception to the calling co-routine and continue",2],["FacadeInterface::get","Icecave\\Coro\\Engine\\FacadeInterface","Icecave\/Coro\/Engine\/FacadeInterface.html#method_get","()","Get the currently executing co-routine.",2],["FacadeInterface::enqueueTask","Icecave\\Coro\\Engine\\FacadeInterface","Icecave\/Coro\/Engine\/FacadeInterface.html#method_enqueueTask","($task)","Enqueue a task for execution.",2],["FacadeInterface::enqueue","Icecave\\Coro\\Engine\\FacadeInterface","Icecave\/Coro\/Engine\/FacadeInterface.html#method_enqueue","(<abbr title=\"Icecave\\Coro\\Engine\\callable\">callable<\/abbr> $callback, array $arguments = array())","Enqueue a callback for execution.",2],["FacadeInterface::engine","Icecave\\Coro\\Engine\\FacadeInterface","Icecave\/Coro\/Engine\/FacadeInterface.html#method_engine","()","Fetch the engine on which the current co-routine is",2],["FacadeInterface::all","Icecave\\Coro\\Engine\\FacadeInterface","Icecave\/Coro\/Engine\/FacadeInterface.html#method_all","($task1, $task2)","Wait for all of the given tasks to complete.",2],["FacadeInterface::any","Icecave\\Coro\\Engine\\FacadeInterface","Icecave\/Coro\/Engine\/FacadeInterface.html#method_any","($task1, $task2)","Wait for any of the given tasks to complete.",2],["FacadeInterface::sleep","Icecave\\Coro\\Engine\\FacadeInterface","Icecave\/Coro\/Engine\/FacadeInterface.html#method_sleep","($timeout)","Suspend execution for a specified period of time.",2],["FacadeInterface::suspend","Icecave\\Coro\\Engine\\FacadeInterface","Icecave\/Coro\/Engine\/FacadeInterface.html#method_suspend","(<abbr title=\"Icecave\\Coro\\Engine\\callable\">callable<\/abbr> $callback)","Suspend the current co-routine.",2],["FacadeInterface::timeout","Icecave\\Coro\\Engine\\FacadeInterface","Icecave\/Coro\/Engine\/FacadeInterface.html#method_timeout","($timeout, $coroutine)","Execute a co-routine with a time limit.",2],["FacadeOperation::__construct","Icecave\\Coro\\Engine\\FacadeOperation","Icecave\/Coro\/Engine\/FacadeOperation.html#method___construct","(string $name, array $arguments)","",2],["FacadeOperation::name","Icecave\\Coro\\Engine\\FacadeOperation","Icecave\/Coro\/Engine\/FacadeOperation.html#method_name","()","",2],["FacadeOperation::arguments","Icecave\\Coro\\Engine\\FacadeOperation","Icecave\/Coro\/Engine\/FacadeOperation.html#method_arguments","()","",2],["FacadeOperation::task","Icecave\\Coro\\Engine\\FacadeOperation","Icecave\/Coro\/Engine\/FacadeOperation.html#method_task","(<a href=\"Icecave\/Coro\/Engine\/EngineInterface.html\"><abbr title=\"Icecave\\Coro\\Engine\\EngineInterface\">EngineInterface<\/abbr><\/a> $engine)","Produce a task.",2],["SynchronousEngine::__construct","Icecave\\Coro\\Engine\\SynchronousEngine","Icecave\/Coro\/Engine\/SynchronousEngine.html#method___construct","(<a href=\"Icecave\/Coro\/Task\/TaskAdaptorInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskAdaptorInterface\">TaskAdaptorInterface<\/abbr><\/a> $taskAdaptor = null, <a href=\"Icecave\/Coro\/Engine\/FacadeInterface.html\"><abbr title=\"Icecave\\Coro\\Engine\\FacadeInterface\">FacadeInterface<\/abbr><\/a> $facadeImplementation = null, <a href=\"Icecave\/Coro\/Engine\/TaskRoot.html\"><abbr title=\"Icecave\\Coro\\Engine\\TaskRoot\">TaskRoot<\/abbr><\/a> $taskRoot = null)","",2],["SynchronousEngine::enqueue","Icecave\\Coro\\Engine\\SynchronousEngine","Icecave\/Coro\/Engine\/SynchronousEngine.html#method_enqueue","(<abbr title=\"Icecave\\Coro\\Engine\\callable\">callable<\/abbr> $callback, array $arguments = array())","Enqueue a callback for execution.",2],["SynchronousEngine::executeAfter","Icecave\\Coro\\Engine\\SynchronousEngine","Icecave\/Coro\/Engine\/SynchronousEngine.html#method_executeAfter","(<abbr title=\"Icecave\\Coro\\Engine\\number\">number<\/abbr> $delay, <abbr title=\"Icecave\\Coro\\Engine\\callable\">callable<\/abbr> $callback, array $arguments = array())","Enqueue a callback for execution after a given timeout.",2],["SynchronousEngine::run","Icecave\\Coro\\Engine\\SynchronousEngine","Icecave\/Coro\/Engine\/SynchronousEngine.html#method_run","()","Run the engine.",2],["TaskRoot::engine","Icecave\\Coro\\Engine\\TaskRoot","Icecave\/Coro\/Engine\/TaskRoot.html#method_engine","()","Fetch the engine on which attached tasks will execute.",2],["TaskRoot::setEngine","Icecave\\Coro\\Engine\\TaskRoot","Icecave\/Coro\/Engine\/TaskRoot.html#method_setEngine","(<a href=\"Icecave\/Coro\/Engine\/EngineInterface.html\"><abbr title=\"Icecave\\Coro\\Engine\\EngineInterface\">EngineInterface<\/abbr><\/a> $engine)","Set the engine on which attached tasks will execute.",2],["TaskRoot::onTaskAttached","Icecave\\Coro\\Engine\\TaskRoot","Icecave\/Coro\/Engine\/TaskRoot.html#method_onTaskAttached","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task)","Notify this object that a task has been attached.",2],["TaskRoot::onTaskDetached","Icecave\\Coro\\Engine\\TaskRoot","Icecave\/Coro\/Engine\/TaskRoot.html#method_onTaskDetached","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task)","Notify this object that a task has been detached.",2],["TaskRoot::onTaskComplete","Icecave\\Coro\\Engine\\TaskRoot","Icecave\/Coro\/Engine\/TaskRoot.html#method_onTaskComplete","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task, mixed $value = null)","Notify this object that a task has completed.",2],["TaskRoot::onTaskCompleteWithException","Icecave\\Coro\\Engine\\TaskRoot","Icecave\/Coro\/Engine\/TaskRoot.html#method_onTaskCompleteWithException","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Notify this object that a task has completed in an",2],["TaskRoot::onTaskCancelled","Icecave\\Coro\\Engine\\TaskRoot","Icecave\/Coro\/Engine\/TaskRoot.html#method_onTaskCancelled","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task)","Notify this object that a task has been cancelled.",2],["EventLoopEngine::__construct","Icecave\\Coro\\React\\EventLoopEngine","Icecave\/Coro\/React\/EventLoopEngine.html#method___construct","(<abbr title=\"React\\EventLoop\\LoopInterface\">LoopInterface<\/abbr> $eventLoop = null, <a href=\"Icecave\/Coro\/Engine\/FacadeInterface.html\"><abbr title=\"Icecave\\Coro\\Engine\\FacadeInterface\">FacadeInterface<\/abbr><\/a> $facadeImplementation = null, <a href=\"Icecave\/Coro\/Task\/TaskAdaptorInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskAdaptorInterface\">TaskAdaptorInterface<\/abbr><\/a> $taskAdaptor = null, <a href=\"Icecave\/Coro\/Engine\/TaskRoot.html\"><abbr title=\"Icecave\\Coro\\Engine\\TaskRoot\">TaskRoot<\/abbr><\/a> $taskRoot = null)","",2],["EventLoopEngine::enqueue","Icecave\\Coro\\React\\EventLoopEngine","Icecave\/Coro\/React\/EventLoopEngine.html#method_enqueue","(<abbr title=\"Icecave\\Coro\\React\\callable\">callable<\/abbr> $callback, array $arguments = array())","Enqueue a callback for execution.",2],["EventLoopEngine::executeAfter","Icecave\\Coro\\React\\EventLoopEngine","Icecave\/Coro\/React\/EventLoopEngine.html#method_executeAfter","(<abbr title=\"Icecave\\Coro\\React\\number\">number<\/abbr> $delay, <abbr title=\"Icecave\\Coro\\React\\callable\">callable<\/abbr> $callback, array $arguments = array())","Enqueue a callback for execution after a given timeout.",2],["EventLoopEngine::eventLoop","Icecave\\Coro\\React\\EventLoopEngine","Icecave\/Coro\/React\/EventLoopEngine.html#method_eventLoop","()","Fetch the ReactPHP event loop to used by the engine",2],["PromisePrimitive::__construct","Icecave\\Coro\\React\\PromisePrimitive","Icecave\/Coro\/React\/PromisePrimitive.html#method___construct","(<abbr title=\"React\\Promise\\PromiseInterface\">PromiseInterface<\/abbr> $promise)","",2],["PromisePrimitive::onPromiseFulfilled","Icecave\\Coro\\React\\PromisePrimitive","Icecave\/Coro\/React\/PromisePrimitive.html#method_onPromiseFulfilled","(mixed $value)","",2],["PromisePrimitive::onPromiseRejected","Icecave\\Coro\\React\\PromisePrimitive","Icecave\/Coro\/React\/PromisePrimitive.html#method_onPromiseRejected","(mixed $reason)","",2],["ReactFacade::eventLoop","Icecave\\Coro\\React\\ReactFacade","Icecave\/Coro\/React\/ReactFacade.html#method_eventLoop","()","Get the ReactPHP event loop on which the current engine",2],["ReactTaskAdaptor::tryAdapt","Icecave\\Coro\\React\\ReactTaskAdaptor","Icecave\/Coro\/React\/ReactTaskAdaptor.html#method_tryAdapt","(<a href=\"Icecave\/Coro\/Engine\/EngineInterface.html\"><abbr title=\"Icecave\\Coro\\Engine\\EngineInterface\">EngineInterface<\/abbr><\/a> $engine, mixed $value)","Attempt to adapt a value into a task.",2],["AbstractParentTask::__construct","Icecave\\Coro\\Task\\AbstractParentTask","Icecave\/Coro\/Task\/AbstractParentTask.html#method___construct","()","",2],["AbstractParentTask::onTaskAttached","Icecave\\Coro\\Task\\AbstractParentTask","Icecave\/Coro\/Task\/AbstractParentTask.html#method_onTaskAttached","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task)","Notify this object that a task has been attached.",2],["AbstractParentTask::onTaskDetached","Icecave\\Coro\\Task\\AbstractParentTask","Icecave\/Coro\/Task\/AbstractParentTask.html#method_onTaskDetached","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task)","Notify this object that a task has been detached.",2],["AbstractParentTask::onTaskCancelled","Icecave\\Coro\\Task\\AbstractParentTask","Icecave\/Coro\/Task\/AbstractParentTask.html#method_onTaskCancelled","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task)","Notify this object that a task has been cancelled.",2],["AbstractParentTask::children","Icecave\\Coro\\Task\\AbstractParentTask","Icecave\/Coro\/Task\/AbstractParentTask.html#method_children","()","Iterate over the children attached to this class.",2],["AbstractTask::__construct","Icecave\\Coro\\Task\\AbstractTask","Icecave\/Coro\/Task\/AbstractTask.html#method___construct","()","",2],["AbstractTask::attach","Icecave\\Coro\\Task\\AbstractTask","Icecave\/Coro\/Task\/AbstractTask.html#method_attach","(<a href=\"Icecave\/Coro\/Task\/TaskParentInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskParentInterface\">TaskParentInterface<\/abbr><\/a> $parent)","Attach this task to a parent.",2],["AbstractTask::detach","Icecave\\Coro\\Task\\AbstractTask","Icecave\/Coro\/Task\/AbstractTask.html#method_detach","()","Detach this task from its parent.",2],["AbstractTask::orphan","Icecave\\Coro\\Task\\AbstractTask","Icecave\/Coro\/Task\/AbstractTask.html#method_orphan","()","Detach this task from its parent and attach it to the",2],["AbstractTask::isAttached","Icecave\\Coro\\Task\\AbstractTask","Icecave\/Coro\/Task\/AbstractTask.html#method_isAttached","()","Check if this task is attached to a parent.",2],["AbstractTask::parent","Icecave\\Coro\\Task\\AbstractTask","Icecave\/Coro\/Task\/AbstractTask.html#method_parent","()","Get this task's parent.",2],["AbstractTask::engine","Icecave\\Coro\\Task\\AbstractTask","Icecave\/Coro\/Task\/AbstractTask.html#method_engine","()","Fetch the engine on which attached tasks will execute.",2],["AbstractTask::status","Icecave\\Coro\\Task\\AbstractTask","Icecave\/Coro\/Task\/AbstractTask.html#method_status","()","Get the current status of the task.",2],["AbstractTask::execute","Icecave\\Coro\\Task\\AbstractTask","Icecave\/Coro\/Task\/AbstractTask.html#method_execute","()","Execute the task.",2],["AbstractTask::cancel","Icecave\\Coro\\Task\\AbstractTask","Icecave\/Coro\/Task\/AbstractTask.html#method_cancel","()","Cancel execution.",2],["WaitAll::__construct","Icecave\\Coro\\Task\\Compound\\WaitAll","Icecave\/Coro\/Task\/Compound\/WaitAll.html#method___construct","(array $tasks)","",2],["WaitAll::onTaskComplete","Icecave\\Coro\\Task\\Compound\\WaitAll","Icecave\/Coro\/Task\/Compound\/WaitAll.html#method_onTaskComplete","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task, mixed $value = null)","Notify this object that a task has completed.",2],["WaitAll::onTaskCompleteWithException","Icecave\\Coro\\Task\\Compound\\WaitAll","Icecave\/Coro\/Task\/Compound\/WaitAll.html#method_onTaskCompleteWithException","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Notify this object that a task has completed in an",2],["WaitAllResult::__construct","Icecave\\Coro\\Task\\Compound\\WaitAllResult","Icecave\/Coro\/Task\/Compound\/WaitAllResult.html#method___construct","()","",2],["WaitAllResult::get","Icecave\\Coro\\Task\\Compound\\WaitAllResult","Icecave\/Coro\/Task\/Compound\/WaitAllResult.html#method_get","(integer $index)","Get the result of a task.",2],["WaitAllResult::hasExceptions","Icecave\\Coro\\Task\\Compound\\WaitAllResult","Icecave\/Coro\/Task\/Compound\/WaitAllResult.html#method_hasExceptions","()","Check if any of the tasks produced exceptions.",2],["WaitAllResult::isValue","Icecave\\Coro\\Task\\Compound\\WaitAllResult","Icecave\/Coro\/Task\/Compound\/WaitAllResult.html#method_isValue","(integer $index)","Check if a specific task produced a value (ie, not",2],["WaitAllResult::isException","Icecave\\Coro\\Task\\Compound\\WaitAllResult","Icecave\/Coro\/Task\/Compound\/WaitAllResult.html#method_isException","(integer $index)","Check if a specific task produced an exception.",2],["WaitAllResult::setValue","Icecave\\Coro\\Task\\Compound\\WaitAllResult","Icecave\/Coro\/Task\/Compound\/WaitAllResult.html#method_setValue","(integer $index, mixed $value)","Set the result of a task to a value.",2],["WaitAllResult::setException","Icecave\\Coro\\Task\\Compound\\WaitAllResult","Icecave\/Coro\/Task\/Compound\/WaitAllResult.html#method_setException","($index, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Set the result of a task to an exception.",2],["WaitAllResult::count","Icecave\\Coro\\Task\\Compound\\WaitAllResult","Icecave\/Coro\/Task\/Compound\/WaitAllResult.html#method_count","()","Get the number of tasks that were executed, and hence",2],["WaitAllResult::getIterator","Icecave\\Coro\\Task\\Compound\\WaitAllResult","Icecave\/Coro\/Task\/Compound\/WaitAllResult.html#method_getIterator","()","",2],["WaitAllResult::offsetExists","Icecave\\Coro\\Task\\Compound\\WaitAllResult","Icecave\/Coro\/Task\/Compound\/WaitAllResult.html#method_offsetExists","($index)","",2],["WaitAllResult::offsetGet","Icecave\\Coro\\Task\\Compound\\WaitAllResult","Icecave\/Coro\/Task\/Compound\/WaitAllResult.html#method_offsetGet","($index)","",2],["WaitAllResult::offsetSet","Icecave\\Coro\\Task\\Compound\\WaitAllResult","Icecave\/Coro\/Task\/Compound\/WaitAllResult.html#method_offsetSet","($index, $result)","",2],["WaitAllResult::offsetUnset","Icecave\\Coro\\Task\\Compound\\WaitAllResult","Icecave\/Coro\/Task\/Compound\/WaitAllResult.html#method_offsetUnset","($index)","",2],["WaitAny::__construct","Icecave\\Coro\\Task\\Compound\\WaitAny","Icecave\/Coro\/Task\/Compound\/WaitAny.html#method___construct","(array $tasks)","",2],["WaitAny::onTaskComplete","Icecave\\Coro\\Task\\Compound\\WaitAny","Icecave\/Coro\/Task\/Compound\/WaitAny.html#method_onTaskComplete","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task, mixed $value = null)","Notify this task that a child task has completed.",2],["WaitAny::onTaskCompleteWithException","Icecave\\Coro\\Task\\Compound\\WaitAny","Icecave\/Coro\/Task\/Compound\/WaitAny.html#method_onTaskCompleteWithException","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Notify this task that a child task has completed with",2],["WaitAnyResult::__construct","Icecave\\Coro\\Task\\Compound\\WaitAnyResult","Icecave\/Coro\/Task\/Compound\/WaitAnyResult.html#method___construct","()","",2],["WaitAnyResult::index","Icecave\\Coro\\Task\\Compound\\WaitAnyResult","Icecave\/Coro\/Task\/Compound\/WaitAnyResult.html#method_index","()","",2],["WaitAnyResult::get","Icecave\\Coro\\Task\\Compound\\WaitAnyResult","Icecave\/Coro\/Task\/Compound\/WaitAnyResult.html#method_get","()","Get the result of the task.",2],["WaitAnyResult::isValue","Icecave\\Coro\\Task\\Compound\\WaitAnyResult","Icecave\/Coro\/Task\/Compound\/WaitAnyResult.html#method_isValue","()","Check if the task produced a value (ie, not an exception).",2],["WaitAnyResult::isException","Icecave\\Coro\\Task\\Compound\\WaitAnyResult","Icecave\/Coro\/Task\/Compound\/WaitAnyResult.html#method_isException","()","Check if the task produced an exception.",2],["WaitAnyResult::setValue","Icecave\\Coro\\Task\\Compound\\WaitAnyResult","Icecave\/Coro\/Task\/Compound\/WaitAnyResult.html#method_setValue","(integer $index, mixed $value)","Set the result of the task to a value.",2],["WaitAnyResult::setException","Icecave\\Coro\\Task\\Compound\\WaitAnyResult","Icecave\/Coro\/Task\/Compound\/WaitAnyResult.html#method_setException","($index, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Set the result of the task to an exception.",2],["TaskAdaptationException::__construct","Icecave\\Coro\\Task\\Exception\\TaskAdaptationException","Icecave\/Coro\/Task\/Exception\/TaskAdaptationException.html#method___construct","($value)","",2],["TaskCancelledException::__construct","Icecave\\Coro\\Task\\Exception\\TaskCancelledException","Icecave\/Coro\/Task\/Exception\/TaskCancelledException.html#method___construct","()","",2],["TaskTimeoutException::__construct","Icecave\\Coro\\Task\\Exception\\TaskTimeoutException","Icecave\/Coro\/Task\/Exception\/TaskTimeoutException.html#method___construct","()","",2],["ImmediatePrimitive::__construct","Icecave\\Coro\\Task\\Primitives\\ImmediatePrimitive","Icecave\/Coro\/Task\/Primitives\/ImmediatePrimitive.html#method___construct","(<abbr title=\"Icecave\\Coro\\Task\\Primitives\\callable\">callable<\/abbr> $callback)","",2],["ImmediatePrimitive::callback","Icecave\\Coro\\Task\\Primitives\\ImmediatePrimitive","Icecave\/Coro\/Task\/Primitives\/ImmediatePrimitive.html#method_callback","()","",2],["ReturnPrimitive::__construct","Icecave\\Coro\\Task\\Primitives\\ReturnPrimitive","Icecave\/Coro\/Task\/Primitives\/ReturnPrimitive.html#method___construct","(mixed $value)","",2],["SleepPrimitive::__construct","Icecave\\Coro\\Task\\Primitives\\SleepPrimitive","Icecave\/Coro\/Task\/Primitives\/SleepPrimitive.html#method___construct","(<abbr title=\"Icecave\\Coro\\Task\\Primitives\\number\">number<\/abbr> $timeout)","",2],["SuspendPrimitive::__construct","Icecave\\Coro\\Task\\Primitives\\SuspendPrimitive","Icecave\/Coro\/Task\/Primitives\/SuspendPrimitive.html#method___construct","(<abbr title=\"Icecave\\Coro\\Task\\Primitives\\callable\">callable<\/abbr> $callback)","",2],["ThrowPrimitive::__construct","Icecave\\Coro\\Task\\Primitives\\ThrowPrimitive","Icecave\/Coro\/Task\/Primitives\/ThrowPrimitive.html#method___construct","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","",2],["TimeoutPrimitive::__construct","Icecave\\Coro\\Task\\Primitives\\TimeoutPrimitive","Icecave\/Coro\/Task\/Primitives\/TimeoutPrimitive.html#method___construct","(<abbr title=\"Icecave\\Coro\\Task\\Primitives\\number\">number<\/abbr> $timeout, mixed $task)","",2],["TimeoutPrimitive::onTaskComplete","Icecave\\Coro\\Task\\Primitives\\TimeoutPrimitive","Icecave\/Coro\/Task\/Primitives\/TimeoutPrimitive.html#method_onTaskComplete","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task, mixed $value = null)","Notify this object that a task has completed.",2],["TimeoutPrimitive::onTaskCompleteWithException","Icecave\\Coro\\Task\\Primitives\\TimeoutPrimitive","Icecave\/Coro\/Task\/Primitives\/TimeoutPrimitive.html#method_onTaskCompleteWithException","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Notify this object that a task has completed in an",2],["TimeoutPrimitive::onTimeout","Icecave\\Coro\\Task\\Primitives\\TimeoutPrimitive","Icecave\/Coro\/Task\/Primitives\/TimeoutPrimitive.html#method_onTimeout","()","Called when the timeout is reached.",2],["TaskAdaptor::adapt","Icecave\\Coro\\Task\\TaskAdaptor","Icecave\/Coro\/Task\/TaskAdaptor.html#method_adapt","(<a href=\"Icecave\/Coro\/Engine\/EngineInterface.html\"><abbr title=\"Icecave\\Coro\\Engine\\EngineInterface\">EngineInterface<\/abbr><\/a> $engine, mixed $value)","Adapt a value into a task.",2],["TaskAdaptor::tryAdapt","Icecave\\Coro\\Task\\TaskAdaptor","Icecave\/Coro\/Task\/TaskAdaptor.html#method_tryAdapt","(<a href=\"Icecave\/Coro\/Engine\/EngineInterface.html\"><abbr title=\"Icecave\\Coro\\Engine\\EngineInterface\">EngineInterface<\/abbr><\/a> $engine, mixed $value)","Attempt to adapt a value into a task.",2],["TaskAdaptorInterface::adapt","Icecave\\Coro\\Task\\TaskAdaptorInterface","Icecave\/Coro\/Task\/TaskAdaptorInterface.html#method_adapt","(<a href=\"Icecave\/Coro\/Engine\/EngineInterface.html\"><abbr title=\"Icecave\\Coro\\Engine\\EngineInterface\">EngineInterface<\/abbr><\/a> $engine, mixed $value)","Adapt a value into a task.",2],["TaskAdaptorInterface::tryAdapt","Icecave\\Coro\\Task\\TaskAdaptorInterface","Icecave\/Coro\/Task\/TaskAdaptorInterface.html#method_tryAdapt","(<a href=\"Icecave\/Coro\/Engine\/EngineInterface.html\"><abbr title=\"Icecave\\Coro\\Engine\\EngineInterface\">EngineInterface<\/abbr><\/a> $engine, mixed $value)","Attempt to adapt a value into a task.",2],["TaskInterface::attach","Icecave\\Coro\\Task\\TaskInterface","Icecave\/Coro\/Task\/TaskInterface.html#method_attach","(<a href=\"Icecave\/Coro\/Task\/TaskParentInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskParentInterface\">TaskParentInterface<\/abbr><\/a> $parent)","Attach this task to a parent.",2],["TaskInterface::detach","Icecave\\Coro\\Task\\TaskInterface","Icecave\/Coro\/Task\/TaskInterface.html#method_detach","()","Detach this task from its parent.",2],["TaskInterface::orphan","Icecave\\Coro\\Task\\TaskInterface","Icecave\/Coro\/Task\/TaskInterface.html#method_orphan","()","Detach this task from its parent and attach it to the",2],["TaskInterface::isAttached","Icecave\\Coro\\Task\\TaskInterface","Icecave\/Coro\/Task\/TaskInterface.html#method_isAttached","()","Check if this task is attached to a parent.",2],["TaskInterface::parent","Icecave\\Coro\\Task\\TaskInterface","Icecave\/Coro\/Task\/TaskInterface.html#method_parent","()","Get this task's parent.",2],["TaskInterface::engine","Icecave\\Coro\\Task\\TaskInterface","Icecave\/Coro\/Task\/TaskInterface.html#method_engine","()","Fetch the engine on which attached tasks will execute.",2],["TaskInterface::status","Icecave\\Coro\\Task\\TaskInterface","Icecave\/Coro\/Task\/TaskInterface.html#method_status","()","Get the current status of the task.",2],["TaskInterface::execute","Icecave\\Coro\\Task\\TaskInterface","Icecave\/Coro\/Task\/TaskInterface.html#method_execute","()","Execute the task.",2],["TaskInterface::cancel","Icecave\\Coro\\Task\\TaskInterface","Icecave\/Coro\/Task\/TaskInterface.html#method_cancel","()","Cancel execution.",2],["TaskParentInterface::engine","Icecave\\Coro\\Task\\TaskParentInterface","Icecave\/Coro\/Task\/TaskParentInterface.html#method_engine","()","Fetch the engine on which attached tasks will execute.",2],["TaskParentInterface::onTaskAttached","Icecave\\Coro\\Task\\TaskParentInterface","Icecave\/Coro\/Task\/TaskParentInterface.html#method_onTaskAttached","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task)","Notify this object that a task has been attached.",2],["TaskParentInterface::onTaskDetached","Icecave\\Coro\\Task\\TaskParentInterface","Icecave\/Coro\/Task\/TaskParentInterface.html#method_onTaskDetached","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task)","Notify this object that a task has been detached.",2],["TaskParentInterface::onTaskComplete","Icecave\\Coro\\Task\\TaskParentInterface","Icecave\/Coro\/Task\/TaskParentInterface.html#method_onTaskComplete","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task, mixed $value = null)","Notify this object that a task has completed.",2],["TaskParentInterface::onTaskCompleteWithException","Icecave\\Coro\\Task\\TaskParentInterface","Icecave\/Coro\/Task\/TaskParentInterface.html#method_onTaskCompleteWithException","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Notify this object that a task has completed in an",2],["TaskParentInterface::onTaskCancelled","Icecave\\Coro\\Task\\TaskParentInterface","Icecave\/Coro\/Task\/TaskParentInterface.html#method_onTaskCancelled","(<a href=\"Icecave\/Coro\/Task\/TaskInterface.html\"><abbr title=\"Icecave\\Coro\\Task\\TaskInterface\">TaskInterface<\/abbr><\/a> $task)","Notify this object that a task has been cancelled.",2],["TaskProviderInterface::task","Icecave\\Coro\\Task\\TaskProviderInterface","Icecave\/Coro\/Task\/TaskProviderInterface.html#method_task","(<a href=\"Icecave\/Coro\/Engine\/EngineInterface.html\"><abbr title=\"Icecave\\Coro\\Engine\\EngineInterface\">EngineInterface<\/abbr><\/a> $engine)","Produce a task.",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']